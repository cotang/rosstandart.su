/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$s-btn-ask-hover-name: 's-btn-ask-hover';
$s-btn-ask-hover-x: 0px;
$s-btn-ask-hover-y: 0px;
$s-btn-ask-hover-offset-x: 0px;
$s-btn-ask-hover-offset-y: 0px;
$s-btn-ask-hover-width: 178px;
$s-btn-ask-hover-height: 71px;
$s-btn-ask-hover-total-width: 358px;
$s-btn-ask-hover-total-height: 182px;
$s-btn-ask-hover-image: '../img/png-sprite.png';
$s-btn-ask-hover: (0px, 0px, 0px, 0px, 178px, 71px, 358px, 182px, '../img/png-sprite.png', 's-btn-ask-hover', );
$s-btn-ask-name: 's-btn-ask';
$s-btn-ask-x: 0px;
$s-btn-ask-y: 73px;
$s-btn-ask-offset-x: 0px;
$s-btn-ask-offset-y: -73px;
$s-btn-ask-width: 178px;
$s-btn-ask-height: 71px;
$s-btn-ask-total-width: 358px;
$s-btn-ask-total-height: 182px;
$s-btn-ask-image: '../img/png-sprite.png';
$s-btn-ask: (0px, 73px, 0px, -73px, 178px, 71px, 358px, 182px, '../img/png-sprite.png', 's-btn-ask', );
$s-btn-cert-hover-name: 's-btn-cert-hover';
$s-btn-cert-hover-x: 180px;
$s-btn-cert-hover-y: 0px;
$s-btn-cert-hover-offset-x: -180px;
$s-btn-cert-hover-offset-y: 0px;
$s-btn-cert-hover-width: 178px;
$s-btn-cert-hover-height: 71px;
$s-btn-cert-hover-total-width: 358px;
$s-btn-cert-hover-total-height: 182px;
$s-btn-cert-hover-image: '../img/png-sprite.png';
$s-btn-cert-hover: (180px, 0px, -180px, 0px, 178px, 71px, 358px, 182px, '../img/png-sprite.png', 's-btn-cert-hover', );
$s-btn-cert-name: 's-btn-cert';
$s-btn-cert-x: 180px;
$s-btn-cert-y: 73px;
$s-btn-cert-offset-x: -180px;
$s-btn-cert-offset-y: -73px;
$s-btn-cert-width: 178px;
$s-btn-cert-height: 71px;
$s-btn-cert-total-width: 358px;
$s-btn-cert-total-height: 182px;
$s-btn-cert-image: '../img/png-sprite.png';
$s-btn-cert: (180px, 73px, -180px, -73px, 178px, 71px, 358px, 182px, '../img/png-sprite.png', 's-btn-cert', );
$s-social-rss-name: 's-social-rss';
$s-social-rss-x: 0px;
$s-social-rss-y: 146px;
$s-social-rss-offset-x: 0px;
$s-social-rss-offset-y: -146px;
$s-social-rss-width: 36px;
$s-social-rss-height: 36px;
$s-social-rss-total-width: 358px;
$s-social-rss-total-height: 182px;
$s-social-rss-image: '../img/png-sprite.png';
$s-social-rss: (0px, 146px, 0px, -146px, 36px, 36px, 358px, 182px, '../img/png-sprite.png', 's-social-rss', );
$s-social-tw-name: 's-social-tw';
$s-social-tw-x: 38px;
$s-social-tw-y: 146px;
$s-social-tw-offset-x: -38px;
$s-social-tw-offset-y: -146px;
$s-social-tw-width: 36px;
$s-social-tw-height: 36px;
$s-social-tw-total-width: 358px;
$s-social-tw-total-height: 182px;
$s-social-tw-image: '../img/png-sprite.png';
$s-social-tw: (38px, 146px, -38px, -146px, 36px, 36px, 358px, 182px, '../img/png-sprite.png', 's-social-tw', );
$s-social-vk-name: 's-social-vk';
$s-social-vk-x: 76px;
$s-social-vk-y: 146px;
$s-social-vk-offset-x: -76px;
$s-social-vk-offset-y: -146px;
$s-social-vk-width: 36px;
$s-social-vk-height: 36px;
$s-social-vk-total-width: 358px;
$s-social-vk-total-height: 182px;
$s-social-vk-image: '../img/png-sprite.png';
$s-social-vk: (76px, 146px, -76px, -146px, 36px, 36px, 358px, 182px, '../img/png-sprite.png', 's-social-vk', );
$s-telephone-name: 's-telephone';
$s-telephone-x: 114px;
$s-telephone-y: 146px;
$s-telephone-offset-x: -114px;
$s-telephone-offset-y: -146px;
$s-telephone-width: 36px;
$s-telephone-height: 36px;
$s-telephone-total-width: 358px;
$s-telephone-total-height: 182px;
$s-telephone-image: '../img/png-sprite.png';
$s-telephone: (114px, 146px, -114px, -146px, 36px, 36px, 358px, 182px, '../img/png-sprite.png', 's-telephone', );
$spritesheet-width: 358px;
$spritesheet-height: 182px;
$spritesheet-image: '../img/png-sprite.png';
$spritesheet-sprites: ($s-btn-ask-hover, $s-btn-ask, $s-btn-cert-hover, $s-btn-cert, $s-social-rss, $s-social-tw, $s-social-vk, $s-telephone, );
$spritesheet: (358px, 182px, '../img/png-sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
